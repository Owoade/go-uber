// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: driver.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO "drivers" (
    email,
    password
) VALUES (
    $1, $2
) RETURNING id, email, password, "lastLocation"
`

type CreateDriverParams struct {
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRow(ctx, createDriver, arg.Email, arg.Password)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastLocation,
	)
	return i, err
}

const getDriver = `-- name: GetDriver :one
SELECT id, email, password, "lastLocation" FROM "drivers" WHERE email=$1 LIMIT 1
`

func (q *Queries) GetDriver(ctx context.Context, email pgtype.Text) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriver, email)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastLocation,
	)
	return i, err
}

const getDriverById = `-- name: GetDriverById :one
SELECT id, email, password, "lastLocation" FROM "drivers" WHERE id=$1 LIMIT 1
`

func (q *Queries) GetDriverById(ctx context.Context, id int32) (Driver, error) {
	row := q.db.QueryRow(ctx, getDriverById, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastLocation,
	)
	return i, err
}

const updateDriverLastLocation = `-- name: UpdateDriverLastLocation :exec
UPDATE "drivers" SET "lastLocation"=$1 WHERE id=$2
`

type UpdateDriverLastLocationParams struct {
	LastLocation pgtype.Point
	ID           int32
}

func (q *Queries) UpdateDriverLastLocation(ctx context.Context, arg UpdateDriverLastLocationParams) error {
	_, err := q.db.Exec(ctx, updateDriverLastLocation, arg.LastLocation, arg.ID)
	return err
}
