// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    email,
    password
) VALUES (
    $1, $2
) RETURNING id, email, password
`

type CreateUserParams struct {
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password FROM "users" WHERE email=$1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password FROM "users" WHERE id=$1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}
