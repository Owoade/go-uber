// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wallet.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO "wallets" (
    "userId",
    balance
) VALUES (
    $1,
    $2
) RETURNING id, "userId", balance, "lastFunded"
`

type CreateWalletParams struct {
	UserId  pgtype.Int4
	Balance pgtype.Int8
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.UserId, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Balance,
		&i.LastFunded,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT balance, id FROM "wallets" WHERE "userId"=$1
`

type GetWalletRow struct {
	Balance pgtype.Int8
	ID      int32
}

func (q *Queries) GetWallet(ctx context.Context, userid pgtype.Int4) (GetWalletRow, error) {
	row := q.db.QueryRow(ctx, getWallet, userid)
	var i GetWalletRow
	err := row.Scan(&i.Balance, &i.ID)
	return i, err
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE "wallets" SET balance = balance + $1 WHERE "userId" = $2 RETURNING id, "userId", balance, "lastFunded"
`

type UpdateBalanceParams struct {
	Balance pgtype.Int8
	UserId  pgtype.Int4
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateBalance, arg.Balance, arg.UserId)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Balance,
		&i.LastFunded,
	)
	return i, err
}
